// Logic Name
coco DReddit

////////////////////////
////// Logic State 
//////////////////////
state persistent:
    posts Map[U64]Post

////////////////////////
////// Classes
//////////////////////

// The class Todo is a structure for defining a Todo,
// where it can possess multiple fields and methods
class Post:
    field id U64
    field creator String
    field imageUri String
    field content String
    field upvotes U64
    field downvotes U64
    field comments []Comment
    field votes Map[Address]U64 // 0 for not voted, 1 for upvoted, 2 for downvoted

class Comment:
    field commentor String
    field text String

////////////////////////
////// Deployer Endpoints
//////////////////////

// Init!() deployer is a constructor that leaves
// the persistent state untouched at the deploy time.
endpoint deployer Init!():
    pass

// pass means do nothing

////////////////////////
////// Write Endpoints
//////////////////////

// "!" after endpoint name means endpoint mutates
// the logic state 

// CreatePost!() is an invokable that creates & adds a new post
// and also returns the new post
endpoint invokable CreatePost!(creator, imageUri, content String) -> (post Post):
    if(creator == "" || content == ""):
        throw "Invalid Input"

    var newPost = Post{
        creator: creator,
        imageUri: imageUri,
        content: content,
        upvotes: 0,
        downvotes: 0,
        comments: make([]Comment),
        votes: make(Map[Address]U64)
    }

    // "<-" is used to read and then mutate the state
    // (Here the final value of posts in the context 
    // block will be assigned to DReddit.State.posts)
    mutate posts <- DReddit.State.posts:
        newPost.id = len(posts)
        posts[len(posts)] = newPost
        yield post newPost // To return new Post

// Upvote!() is an invokable to upvote
// the post with given id
endpoint invokable Upvote!(id U64):
    var user Address = Address(Sender)
    
    mutate posts <- DReddit.State.posts:
        var post = posts[id]
        var userVote = post.votes[user]

        if(userVote == 1):
            throw "Already Upvoted"
        else if(userVote == 2):
            post.downvotes -= 1
        
        post.votes[user] = 1
        post.upvotes += 1
        

// Downvote!() is an invokable to downvote
// the post with given id
endpoint invokable Downvote!(id U64):
    var user Address = Address(Sender)
    
    mutate posts <- DReddit.State.posts:
        var post = posts[id]
        var userVote = post.votes[user]

        if(userVote == 2):
            throw "Already Downvoted"
        else if(userVote == 1):
            post.upvotes -= 1
        
        post.votes[user] = 2
        post.downvotes += 1

endpoint invokable Comment!(id U64, commentor String, text String):
    var newComment = Comment{
        commentor: commentor,
        text: text
    }

    mutate posts <- DReddit.State.posts:
        posts[id].comments = append(posts[id].comments, newComment)


//////////////////////
////// Read Endpoints
////////////////////

endpoint invokable GetPosts() -> (posts Map[U64]Post):
    observe posts <- DReddit.State.posts